
GreenHouseSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  0000092a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080014c  0080014c  00000a0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d5e  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6b  00000000  00000000  0000297a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1f  00000000  00000000  000035e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00004504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000738  00000000  00000000  000048f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e98  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005ec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_13>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_18>
  4c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	04 02       	muls	r16, r20
  6a:	08 02       	muls	r16, r24
  6c:	15 02       	muls	r17, r21
  6e:	5b 02       	muls	r21, r27
  70:	68 02       	muls	r22, r24
  72:	bf 02       	muls	r27, r31
  74:	ad 02       	muls	r26, r29

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ea e2       	ldi	r30, 0x2A	; 42
  8a:	f9 e0       	ldi	r31, 0x09	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 34       	cpi	r26, 0x4C	; 76
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ac e4       	ldi	r26, 0x4C	; 76
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 39       	cpi	r26, 0x92	; 146
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  ac:	0c 94 93 04 	jmp	0x926	; 0x926 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  b4:	fc 01       	movw	r30, r24
  b6:	40 81       	ld	r20, Z
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <GPIO_config_output+0xe>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <GPIO_config_output+0xa>
  c6:	24 2b       	or	r18, r20
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret

000000cc <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  cc:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  ce:	90 81       	ld	r25, Z
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <GPIO_write_low+0xe>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <GPIO_write_low+0xa>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	20 83       	st	Z, r18
  e4:	08 95       	ret

000000e6 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name|(1<<pin_num);
  e6:	fc 01       	movw	r30, r24
  e8:	40 81       	ld	r20, Z
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_write_high+0xe>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_write_high+0xa>
  f8:	24 2b       	or	r18, r20
  fa:	20 83       	st	Z, r18
  fc:	08 95       	ret

000000fe <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	82 60       	ori	r24, 0x02	; 2
 102:	85 b9       	out	0x05, r24	; 5
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <toggle_e+0x8>
 10a:	00 00       	nop
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret

00000114 <lcd_write>:
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
 118:	66 23       	and	r22, r22
 11a:	21 f0       	breq	.+8      	; 0x124 <lcd_write+0x10>
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 b9       	out	0x05, r24	; 5
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x16>
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	85 b9       	out	0x05, r24	; 5
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	80 61       	ori	r24, 0x10	; 16
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	80 62       	ori	r24, 0x20	; 32
 134:	8a b9       	out	0x0a, r24	; 10
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	8a b9       	out	0x0a, r24	; 10
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	8a b9       	out	0x0a, r24	; 10
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	8b b9       	out	0x0b, r24	; 11
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 7b       	andi	r24, 0xBF	; 191
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8f 7d       	andi	r24, 0xDF	; 223
 152:	8b b9       	out	0x0b, r24	; 11
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 7e       	andi	r24, 0xEF	; 239
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	cc 23       	and	r28, r28
 15c:	1c f4       	brge	.+6      	; 0x164 <lcd_write+0x50>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c6 ff       	sbrs	r28, 6
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0x5a>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	c5 ff       	sbrs	r28, 5
 170:	03 c0       	rjmp	.+6      	; 0x178 <lcd_write+0x64>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 62       	ori	r24, 0x20	; 32
 176:	8b b9       	out	0x0b, r24	; 11
 178:	c4 ff       	sbrs	r28, 4
 17a:	03 c0       	rjmp	.+6      	; 0x182 <lcd_write+0x6e>
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	8b b9       	out	0x0b, r24	; 11
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 77       	andi	r24, 0x7F	; 127
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	8b b9       	out	0x0b, r24	; 11
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	c3 ff       	sbrs	r28, 3
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_write+0x94>
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	c2 ff       	sbrs	r28, 2
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <lcd_write+0x9e>
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	c1 ff       	sbrs	r28, 1
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <lcd_write+0xa8>
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	c0 ff       	sbrs	r28, 0
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <lcd_write+0xb2>
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	8b b9       	out	0x0b, r24	; 11
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	87 eb       	ldi	r24, 0xB7	; 183
 1e4:	9b e0       	ldi	r25, 0x0B	; 11
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_write+0xd2>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_write+0xd8>
 1ec:	00 00       	nop
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <lcd_command>:
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_write>
 1f8:	08 95       	ret

000001fa <lcd_gotoxy>:
 1fa:	61 11       	cpse	r22, r1
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <lcd_gotoxy+0xc>
 1fe:	80 58       	subi	r24, 0x80	; 128
 200:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 204:	08 95       	ret
 206:	80 54       	subi	r24, 0x40	; 64
 208:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 20c:	08 95       	ret

0000020e <lcd_clrscr>:
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 214:	08 95       	ret

00000216 <lcd_putc>:
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_write>
 21c:	08 95       	ret

0000021e <lcd_puts>:
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	fc 01       	movw	r30, r24
 224:	03 c0       	rjmp	.+6      	; 0x22c <lcd_puts+0xe>
 226:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_putc>
 22a:	fe 01       	movw	r30, r28
 22c:	ef 01       	movw	r28, r30
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	80 81       	ld	r24, Z
 232:	81 11       	cpse	r24, r1
 234:	f8 cf       	rjmp	.-16     	; 0x226 <lcd_puts+0x8>
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 240:	84 b1       	in	r24, 0x04	; 4
 242:	81 60       	ori	r24, 0x01	; 1
 244:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 246:	8a b1       	in	r24, 0x0a	; 10
 248:	80 62       	ori	r24, 0x20	; 32
 24a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 24c:	84 b1       	in	r24, 0x04	; 4
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	80 61       	ori	r24, 0x10	; 16
 256:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	99 ef       	ldi	r25, 0xF9	; 249
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x32>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_init+0x38>
 274:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 27c:	8b b1       	in	r24, 0x0b	; 11
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 282:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 286:	8f e1       	ldi	r24, 0x1F	; 31
 288:	9e e4       	ldi	r25, 0x4E	; 78
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x4e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0x54>
 290:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 292:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0x5e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcd_init+0x64>
 2a0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2a2:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_init+0x6e>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0x74>
 2b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	8f 7e       	andi	r24, 0xEF	; 239
 2b6:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2b8:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_init+0x84>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_init+0x8a>
 2c6:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2d4:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2de:	8c 2f       	mov	r24, r28
 2e0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
	 //Configure LEDS as output and initialize with low value.
	 GPIO_config_output(&DDRB, LED_WINDOW);
 2e8:	65 e0       	ldi	r22, 0x05	; 5
 2ea:	84 e2       	ldi	r24, 0x24	; 36
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_WINDOW);
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	85 e2       	ldi	r24, 0x25	; 37
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	 GPIO_config_output(&DDRB, LED_PUMP);
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	84 e2       	ldi	r24, 0x24	; 36
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_PUMP);
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	85 e2       	ldi	r24, 0x25	; 37
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	 GPIO_config_output(&DDRB, LED_FAN);
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	84 e2       	ldi	r24, 0x24	; 36
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_FAN);
 31a:	63 e0       	ldi	r22, 0x03	; 3
 31c:	85 e2       	ldi	r24, 0x25	; 37
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	 GPIO_config_output(&DDRB, LED_LIGHT);
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	84 e2       	ldi	r24, 0x24	; 36
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_LIGHT);
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	
	 //Configure ADC to convert PC0[A0] analog value
	 //Set ADC reference to AVcc
	 ADMUX |=(1<<REFS0);
 338:	ec e7       	ldi	r30, 0x7C	; 124
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	80 83       	st	Z, r24
	 
	 // Set input channel to ADC0
	 ADMUX &= ~((1<MUX3) | (1<<MUX2)|| (1<<MUX1)| (1<<MUX0) );
 342:	80 81       	ld	r24, Z
 344:	8e 7f       	andi	r24, 0xFE	; 254
 346:	80 83       	st	Z, r24

	 // Enable ADC module
	 ADCSRA |= (1<<ADEN);
 348:	ea e7       	ldi	r30, 0x7A	; 122
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24

	 // Enable conversion complete interrupt
	 ADCSRA |= (1<<ADIE);
 352:	80 81       	ld	r24, Z
 354:	88 60       	ori	r24, 0x08	; 8
 356:	80 83       	st	Z, r24
	 
	 // Set clock prescaler to 128
	 
	 ADCSRA |= (1<<ADPS2) | (1<<ADPS1) |(1<<ADPS0) ;
 358:	80 81       	ld	r24, Z
 35a:	87 60       	ori	r24, 0x07	; 7
 35c:	80 83       	st	Z, r24
	  
	//Initialize LCD display 
	lcd_init(LCD_DISP_ON);
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_init>
	
    // Initialize I2C (TWI)
    twi_init();
 364:	0e 94 70 03 	call	0x6e0	; 0x6e0 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 368:	87 e6       	ldi	r24, 0x67	; 103
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 0c 04 	call	0x818	; 0x818 <uart_init>
	
	// Put strings to ringbuffer for transmitting via UART
	uart_puts("\r\nStarting service...\r\n");
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Enable interrupt and set the overflow prescaler to 262ms
    TIM1_overflow_262ms();
 378:	e1 e8       	ldi	r30, 0x81	; 129
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	8b 7f       	andi	r24, 0xFB	; 251
 380:	80 83       	st	Z, r24
 382:	80 81       	ld	r24, Z
 384:	83 60       	ori	r24, 0x03	; 3
 386:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 388:	ef e6       	ldi	r30, 0x6F	; 111
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	80 83       	st	Z, r24
    
	// Enables interrupts by setting the global interrupt mask
    sei();
 392:	78 94       	sei
 394:	ff cf       	rjmp	.-2      	; 0x394 <main+0xac>

00000396 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and take the info through different 
 * I2C sensors and display it via UART or LCD screen.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{	 
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	1f 93       	push	r17
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	28 97       	sbiw	r28, 0x08	; 8
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	cd bf       	out	0x3d, r28	; 61
	//Variable declaration
	 static state_t state = STATE_IDLE;		 // Current state
	 static uint8_t temphumid_addr = 0x5c;   // I2C slave address for measuring temperature and humidity
	 static uint8_t light_addr=0x23;		 // I2C slave address for measuring light
	 static uint8_t soil_addr=0x20;			 // I2C slave address for measuring soil 
	 char uart_string[8] = "00";			 // String for converting numbers by itoa()
 3c8:	80 e3       	ldi	r24, 0x30	; 48
 3ca:	90 e3       	ldi	r25, 0x30	; 48
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	1c 82       	std	Y+4, r1	; 0x04
 3d2:	1b 82       	std	Y+3, r1	; 0x03
 3d4:	fe 01       	movw	r30, r28
 3d6:	35 96       	adiw	r30, 0x05	; 5
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	df 01       	movw	r26, r30
 3dc:	1d 92       	st	X+, r1
 3de:	8a 95       	dec	r24
 3e0:	e9 f7       	brne	.-6      	; 0x3dc <__vector_13+0x46>
	 uint8_t result=1;						 //Temperature variable
	 static uint8_t counter = 0x00;			 //Counter for moving through I2C RAM registers
	 
	 // Start ADC conversion
	 ADCSRA |= (1<<ADSC);
 3e2:	ea e7       	ldi	r30, 0x7A	; 122
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	80 64       	ori	r24, 0x40	; 64
 3ea:	80 83       	st	Z, r24
	
//SENSORS ---------------------
    // FSM
    switch (state)
 3ec:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f0:	8e 2f       	mov	r24, r30
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fc 01       	movw	r30, r24
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	e7 30       	cpi	r30, 0x07	; 7
 3fa:	f1 05       	cpc	r31, r1
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	ec c0       	rjmp	.+472    	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 400:	ec 5c       	subi	r30, 0xCC	; 204
 402:	ff 4f       	sbci	r31, 0xFF	; 255
 404:	0c 94 49 04 	jmp	0x892	; 0x892 <__tablejump2__>
    {
		
	case STATE_IDLE:
	
		state=STATE_SEND1;   
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

    break;
 40e:	e7 c0       	rjmp	.+462    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
      
    case STATE_SEND1:
	
       //Starts i2c with 1st addr-->wanting to write
       twi_start((temphumid_addr<<1) + TWI_WRITE);
 410:	88 eb       	ldi	r24, 0xB8	; 184
 412:	0e 94 7f 03 	call	0x6fe	; 0x6fe <twi_start>
       //Writing 0x0 to the sensor with addr
       twi_write(counter);
 416:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 41a:	0e 94 9c 03 	call	0x738	; 0x738 <twi_write>
       //Nothing else has to be sent
       twi_stop();   
 41e:	0e 94 b0 03 	call	0x760	; 0x760 <twi_stop>
	   state=STATE_REC1; 
 422:	83 e0       	ldi	r24, 0x03	; 3
 424:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	  
	break;
 428:	da c0       	rjmp	.+436    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
        
    case STATE_REC1:
      
	  //After giving the order to the slave we want to read
      twi_start((temphumid_addr<<1) + TWI_READ);
 42a:	89 eb       	ldi	r24, 0xB9	; 185
 42c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <twi_start>
      //Read the temperature integer part
      result=twi_read_nack();
 430:	0e 94 a6 03 	call	0x74c	; 0x74c <twi_read_nack>
 434:	18 2f       	mov	r17, r24
	  //End communication
	  twi_stop();
 436:	0e 94 b0 03 	call	0x760	; 0x760 <twi_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 43a:	4a e0       	ldi	r20, 0x0A	; 10
 43c:	be 01       	movw	r22, r28
 43e:	6f 5f       	subi	r22, 0xFF	; 255
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	81 2f       	mov	r24, r17
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__itoa_ncheck>
	  
	  //Integer to ASCII for displaying in UART and LCD
      itoa(result,uart_string,10);
      //Display in UART	  
	  uart_puts("TEMPERATURE:");
 44a:	89 e1       	ldi	r24, 0x19	; 25
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
      uart_puts(uart_string);
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	  uart_puts("\n");
 45a:	87 e1       	ldi	r24, 0x17	; 23
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	  
      //Display in LCD
 	  lcd_gotoxy(0,0);
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
      lcd_puts("Temp:");
 46a:	86 e2       	ldi	r24, 0x26	; 38
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	  lcd_gotoxy(5,0);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	  lcd_puts(uart_string);
 47a:	ce 01       	movw	r24, r28
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	  lcd_gotoxy(7,0);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	87 e0       	ldi	r24, 0x07	; 7
 486:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	  lcd_puts("C");
 48a:	8c e2       	ldi	r24, 0x2C	; 44
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
		
	  //Condition for turning on LED_WINDOW (open/close window in real life)	
	  if((int)result>20){
 492:	15 31       	cpi	r17, 0x15	; 21
 494:	28 f0       	brcs	.+10     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		  GPIO_write_high(&PORTB, LED_WINDOW);
 496:	65 e0       	ldi	r22, 0x05	; 5
 498:	85 e2       	ldi	r24, 0x25	; 37
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	  }
		
	  if((int)result<=20){
 4a0:	15 31       	cpi	r17, 0x15	; 21
 4a2:	28 f4       	brcc	.+10     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		  GPIO_write_low(&PORTB, LED_WINDOW);
 4a4:	65 e0       	ldi	r22, 0x05	; 5
 4a6:	85 e2       	ldi	r24, 0x25	; 37
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	  }	
	  
	  //Next state		
      state = STATE_SEND2;
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
    break;
 4b4:	94 c0       	rjmp	.+296    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
	
	case STATE_SEND2:
		
	  //Starts i2c with 1st addr-->wanting to write
	  twi_start((light_addr<<1) + TWI_WRITE);
 4b6:	86 e4       	ldi	r24, 0x46	; 70
 4b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <twi_start>
	  //Writing 0x0 to the sensor with addr
	  twi_write(counter);
 4bc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 4c0:	0e 94 9c 03 	call	0x738	; 0x738 <twi_write>
	  //Nothing else has to be sent
	  twi_stop();
 4c4:	0e 94 b0 03 	call	0x760	; 0x760 <twi_stop>
	 
	  //Next state	
	  state=STATE_REC2;
 4c8:	85 e0       	ldi	r24, 0x05	; 5
 4ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	  
	break;
 4ce:	87 c0       	rjmp	.+270    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
		
	case STATE_REC2:
	   //After giving the	order to the slave we want to read
	   twi_start((light_addr<<1) + TWI_READ);
 4d0:	87 e4       	ldi	r24, 0x47	; 71
 4d2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <twi_start>
	   //Read the temperature integer part
	   result=twi_read_nack();
 4d6:	0e 94 a6 03 	call	0x74c	; 0x74c <twi_read_nack>
 4da:	18 2f       	mov	r17, r24
 4dc:	4a e0       	ldi	r20, 0x0A	; 10
 4de:	be 01       	movw	r22, r28
 4e0:	6f 5f       	subi	r22, 0xFF	; 255
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__itoa_ncheck>
	   itoa(result,uart_string,10);
	   twi_stop();
 4ea:	0e 94 b0 03 	call	0x760	; 0x760 <twi_stop>
	   
	   //Display in UART	
	   uart_puts("HUMID:");
 4ee:	8e e2       	ldi	r24, 0x2E	; 46
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	   uart_puts(uart_string);  
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	   uart_puts("\n");
 4fe:	87 e1       	ldi	r24, 0x17	; 23
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	   
	   //Display in LCD
	   lcd_gotoxy(0,1);
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	   lcd_puts("Humid:"); 
 50e:	85 e3       	ldi	r24, 0x35	; 53
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	   lcd_gotoxy(6,1);
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	86 e0       	ldi	r24, 0x06	; 6
 51a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	   lcd_puts(uart_string);
 51e:	ce 01       	movw	r24, r28
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	   lcd_gotoxy(8,1);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	88 e0       	ldi	r24, 0x08	; 8
 52a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	   lcd_puts("%");
 52e:	8c e3       	ldi	r24, 0x3C	; 60
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	   
	   //Condition for turning on LED_FANS (turn on/off fans in real life)
	   if((int)result>20){
 536:	15 31       	cpi	r17, 0x15	; 21
 538:	28 f0       	brcs	.+10     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
		 GPIO_write_high(&PORTB, LED_FAN);
 53a:	63 e0       	ldi	r22, 0x03	; 3
 53c:	85 e2       	ldi	r24, 0x25	; 37
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	   }
	 
	   if((int)result<=20){
 544:	15 31       	cpi	r17, 0x15	; 21
 546:	28 f4       	brcc	.+10     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		 GPIO_write_low(&PORTB, LED_FAN);
 548:	63 e0       	ldi	r22, 0x03	; 3
 54a:	85 e2       	ldi	r24, 0x25	; 37
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	   }
		 
	 state = STATE_SEND3;
 552:	87 e0       	ldi	r24, 0x07	; 7
 554:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	 break;
 558:	42 c0       	rjmp	.+132    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
	 
	 case STATE_SEND3:
	   //Starts i2c with 1st addr-->wanting to write
	   twi_start((soil_addr<<1) + TWI_WRITE);
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <twi_start>
	   //Writing 0x0 to the sensor with addr
	   twi_write(counter);
 560:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 564:	0e 94 9c 03 	call	0x738	; 0x738 <twi_write>
	   //Nothing else has to be sent
	   twi_stop();
 568:	0e 94 b0 03 	call	0x760	; 0x760 <twi_stop>
	   //Increase the counter for moving through RAM memories
	   counter=counter+(uint8_t)1;
 56c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	 
	   state=STATE_REC3;
 576:	86 e0       	ldi	r24, 0x06	; 6
 578:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	 
	 break;
 57c:	30 c0       	rjmp	.+96     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
	 
	 case STATE_REC3:
	 
	   //After giving the order to the slave we want to read
	   twi_start((soil_addr<<1) + TWI_READ);
 57e:	81 e4       	ldi	r24, 0x41	; 65
 580:	0e 94 7f 03 	call	0x6fe	; 0x6fe <twi_start>
	   //Read the temperature integer part
	   result=twi_read_nack();
 584:	0e 94 a6 03 	call	0x74c	; 0x74c <twi_read_nack>
 588:	18 2f       	mov	r17, r24
 58a:	4a e0       	ldi	r20, 0x0A	; 10
 58c:	be 01       	movw	r22, r28
 58e:	6f 5f       	subi	r22, 0xFF	; 255
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__itoa_ncheck>
	   itoa(result,uart_string,10);
	   twi_stop();
 598:	0e 94 b0 03 	call	0x760	; 0x760 <twi_stop>
	   
	   //Display in UART
	   uart_puts("SOIL:");
 59c:	8e e3       	ldi	r24, 0x3E	; 62
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	   uart_puts(uart_string);
 5a4:	ce 01       	movw	r24, r28
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	   uart_puts("\n");
 5ac:	87 e1       	ldi	r24, 0x17	; 23
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
	   
	   //Condition for turning on LED_PUMP (turn on/off water pump in real life) 
	   if((int)result>20){
 5b4:	15 31       	cpi	r17, 0x15	; 21
 5b6:	28 f0       	brcs	.+10     	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
		   GPIO_write_high(&PORTB, LED_PUMP);
 5b8:	64 e0       	ldi	r22, 0x04	; 4
 5ba:	85 e2       	ldi	r24, 0x25	; 37
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	   }
	 
	   if((int)result<=20){
 5c2:	15 31       	cpi	r17, 0x15	; 21
 5c4:	28 f4       	brcc	.+10     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
		   GPIO_write_low(&PORTB, LED_PUMP);
 5c6:	64 e0       	ldi	r22, 0x04	; 4
 5c8:	85 e2       	ldi	r24, 0x25	; 37
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	   }
	
	   state = STATE_IDLE;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	 break;
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
	 
	 //If something unexpected happens then move to IDLE
     default:
	 
        state = STATE_IDLE;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
     break;
    }

}
 5de:	28 96       	adiw	r28, 0x08	; 8
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	bf 91       	pop	r27
 5f4:	af 91       	pop	r26
 5f6:	9f 91       	pop	r25
 5f8:	8f 91       	pop	r24
 5fa:	7f 91       	pop	r23
 5fc:	6f 91       	pop	r22
 5fe:	5f 91       	pop	r21
 600:	4f 91       	pop	r20
 602:	3f 91       	pop	r19
 604:	2f 91       	pop	r18
 606:	1f 91       	pop	r17
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <__vector_21>:
		
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART. Decide if turn on/off windows
 **********************************************************************/	
ISR(ADC_vect){
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	00 d0       	rcall	.+0      	; 0x63e <__vector_21+0x2c>
 63e:	00 d0       	rcall	.+0      	; 0x640 <__vector_21+0x2e>
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
	
		//Variable declaration
		char lcd_string[4] = "0000";
 644:	80 e3       	ldi	r24, 0x30	; 48
 646:	90 e3       	ldi	r25, 0x30	; 48
 648:	9a 83       	std	Y+2, r25	; 0x02
 64a:	89 83       	std	Y+1, r24	; 0x01
 64c:	9c 83       	std	Y+4, r25	; 0x04
 64e:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t value = 0;	
		uint16_t real_value = 0;
		
		//Receive the digital value from the AD converter		
		value=ADC;
 650:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 654:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		//Calculate the real value (we want a number between 0 and 5 to measure light)
		real_value=value/204;
 658:	a1 ea       	ldi	r26, 0xA1	; 161
 65a:	b0 ea       	ldi	r27, 0xA0	; 160
 65c:	0e 94 4f 04 	call	0x89e	; 0x89e <__umulhisi3>
 660:	8c 01       	movw	r16, r24
 662:	00 0f       	add	r16, r16
 664:	01 2f       	mov	r16, r17
 666:	00 1f       	adc	r16, r16
 668:	11 0b       	sbc	r17, r17
 66a:	11 95       	neg	r17
 66c:	4a e0       	ldi	r20, 0x0A	; 10
 66e:	be 01       	movw	r22, r28
 670:	6f 5f       	subi	r22, 0xFF	; 255
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	c8 01       	movw	r24, r16
 676:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__itoa_ncheck>
		//Integer to ASCII for sending to UART
		itoa(real_value,lcd_string,10);
		//Display in UART
		uart_puts("LIGHT:");
 67a:	84 e4       	ldi	r24, 0x44	; 68
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
		uart_puts(lcd_string);
 682:	ce 01       	movw	r24, r28
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
		uart_puts("\n");
 68a:	87 e1       	ldi	r24, 0x17	; 23
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	0e 94 3c 04 	call	0x878	; 0x878 <uart_puts>
		
		//Condition for turning on	LED_LIGHT (turn on/off lightbulbs in real life)
		if(real_value<2){
 692:	02 30       	cpi	r16, 0x02	; 2
 694:	11 05       	cpc	r17, r1
 696:	30 f4       	brcc	.+12     	; 0x6a4 <__vector_21+0x92>
			GPIO_write_high(&PORTB, LED_LIGHT);
 698:	62 e0       	ldi	r22, 0x02	; 2
 69a:	85 e2       	ldi	r24, 0x25	; 37
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <__vector_21+0x9c>
		}
		else{
			GPIO_write_low(&PORTB, LED_LIGHT);
 6a4:	62 e0       	ldi	r22, 0x02	; 2
 6a6:	85 e2       	ldi	r24, 0x25	; 37
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
		}
			
		
		
}		
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	bf 91       	pop	r27
 6c0:	af 91       	pop	r26
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	7f 91       	pop	r23
 6c8:	6f 91       	pop	r22
 6ca:	5f 91       	pop	r21
 6cc:	4f 91       	pop	r20
 6ce:	3f 91       	pop	r19
 6d0:	2f 91       	pop	r18
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	0f 90       	pop	r0
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	0f 90       	pop	r0
 6dc:	1f 90       	pop	r1
 6de:	18 95       	reti

000006e0 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 6e0:	87 b1       	in	r24, 0x07	; 7
 6e2:	8f 7c       	andi	r24, 0xCF	; 207
 6e4:	87 b9       	out	0x07, r24	; 7
 6e6:	88 b1       	in	r24, 0x08	; 8
 6e8:	80 63       	ori	r24, 0x30	; 48
 6ea:	88 b9       	out	0x08, r24	; 8
 6ec:	e9 eb       	ldi	r30, 0xB9	; 185
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	8c 7f       	andi	r24, 0xFC	; 252
 6f4:	80 83       	st	Z, r24
 6f6:	88 e9       	ldi	r24, 0x98	; 152
 6f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 6fc:	08 95       	ret

000006fe <twi_start>:
 6fe:	94 ea       	ldi	r25, 0xA4	; 164
 700:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 704:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 708:	99 23       	and	r25, r25
 70a:	e4 f7       	brge	.-8      	; 0x704 <twi_start+0x6>
 70c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 710:	84 e8       	ldi	r24, 0x84	; 132
 712:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 716:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 71a:	88 23       	and	r24, r24
 71c:	e4 f7       	brge	.-8      	; 0x716 <twi_start+0x18>
 71e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 722:	88 7f       	andi	r24, 0xF8	; 248
 724:	88 31       	cpi	r24, 0x18	; 24
 726:	21 f0       	breq	.+8      	; 0x730 <twi_start+0x32>
 728:	80 34       	cpi	r24, 0x40	; 64
 72a:	21 f4       	brne	.+8      	; 0x734 <twi_start+0x36>
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	08 95       	ret
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	08 95       	ret
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	08 95       	ret

00000738 <twi_write>:
 738:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 73c:	84 e8       	ldi	r24, 0x84	; 132
 73e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 742:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 746:	88 23       	and	r24, r24
 748:	e4 f7       	brge	.-8      	; 0x742 <twi_write+0xa>
 74a:	08 95       	ret

0000074c <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 74c:	84 e8       	ldi	r24, 0x84	; 132
 74e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 752:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 756:	88 23       	and	r24, r24
 758:	e4 f7       	brge	.-8      	; 0x752 <twi_read_nack+0x6>
    return (TWDR);
 75a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 75e:	08 95       	ret

00000760 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 760:	84 e9       	ldi	r24, 0x94	; 148
 762:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 766:	08 95       	ret

00000768 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 768:	1f 92       	push	r1
 76a:	0f 92       	push	r0
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	0f 92       	push	r0
 770:	11 24       	eor	r1, r1
 772:	2f 93       	push	r18
 774:	8f 93       	push	r24
 776:	9f 93       	push	r25
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
 77c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 780:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 784:	8c 71       	andi	r24, 0x1C	; 28
 786:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <UART_RxHead>
 78a:	ef 5f       	subi	r30, 0xFF	; 255
 78c:	ef 71       	andi	r30, 0x1F	; 31
 78e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <UART_RxTail>
 792:	e9 17       	cp	r30, r25
 794:	39 f0       	breq	.+14     	; 0x7a4 <__vector_18+0x3c>
 796:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <UART_RxHead>
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	ee 5a       	subi	r30, 0xAE	; 174
 79e:	fe 4f       	sbci	r31, 0xFE	; 254
 7a0:	20 83       	st	Z, r18
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <__vector_18+0x3e>
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <UART_LastRxError>
 7aa:	89 2b       	or	r24, r25
 7ac:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <UART_LastRxError>
 7b0:	ff 91       	pop	r31
 7b2:	ef 91       	pop	r30
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__vector_19>:
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	ef 93       	push	r30
 7d4:	ff 93       	push	r31
 7d6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <UART_TxHead>
 7da:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <UART_TxTail>
 7de:	98 17       	cp	r25, r24
 7e0:	69 f0       	breq	.+26     	; 0x7fc <__vector_19+0x38>
 7e2:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <UART_TxTail>
 7e6:	ef 5f       	subi	r30, 0xFF	; 255
 7e8:	ef 71       	andi	r30, 0x1F	; 31
 7ea:	e0 93 50 01 	sts	0x0150, r30	; 0x800150 <UART_TxTail>
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	ee 58       	subi	r30, 0x8E	; 142
 7f2:	fe 4f       	sbci	r31, 0xFE	; 254
 7f4:	80 81       	ld	r24, Z
 7f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fc:	e1 ec       	ldi	r30, 0xC1	; 193
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	8f 7d       	andi	r24, 0xDF	; 223
 804:	80 83       	st	Z, r24
 806:	ff 91       	pop	r31
 808:	ef 91       	pop	r30
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	0f 90       	pop	r0
 810:	0f be       	out	0x3f, r0	; 63
 812:	0f 90       	pop	r0
 814:	1f 90       	pop	r1
 816:	18 95       	reti

00000818 <uart_init>:
 818:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <UART_TxHead>
 81c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <UART_TxTail>
 820:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_RxHead>
 824:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <UART_RxTail>
 828:	28 2f       	mov	r18, r24
 82a:	39 2f       	mov	r19, r25
 82c:	33 23       	and	r19, r19
 82e:	1c f4       	brge	.+6      	; 0x836 <uart_init+0x1e>
 830:	22 e0       	ldi	r18, 0x02	; 2
 832:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 836:	90 78       	andi	r25, 0x80	; 128
 838:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 83c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 840:	88 e9       	ldi	r24, 0x98	; 152
 842:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 846:	86 e0       	ldi	r24, 0x06	; 6
 848:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 84c:	08 95       	ret

0000084e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 84e:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <UART_TxHead>
 852:	2f 5f       	subi	r18, 0xFF	; 255
 854:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 856:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <UART_TxTail>
 85a:	29 17       	cp	r18, r25
 85c:	e1 f3       	breq	.-8      	; 0x856 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 85e:	e2 2f       	mov	r30, r18
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	ee 58       	subi	r30, 0x8E	; 142
 864:	fe 4f       	sbci	r31, 0xFE	; 254
 866:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 868:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 86c:	e1 ec       	ldi	r30, 0xC1	; 193
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	80 62       	ori	r24, 0x20	; 32
 874:	80 83       	st	Z, r24
 876:	08 95       	ret

00000878 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	ec 01       	movw	r28, r24
    while (*s)
 87e:	03 c0       	rjmp	.+6      	; 0x886 <uart_puts+0xe>
        uart_putc(*s++);
 880:	21 96       	adiw	r28, 0x01	; 1
 882:	0e 94 27 04 	call	0x84e	; 0x84e <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 886:	88 81       	ld	r24, Y
 888:	81 11       	cpse	r24, r1
 88a:	fa cf       	rjmp	.-12     	; 0x880 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	08 95       	ret

00000892 <__tablejump2__>:
 892:	ee 0f       	add	r30, r30
 894:	ff 1f       	adc	r31, r31
 896:	05 90       	lpm	r0, Z+
 898:	f4 91       	lpm	r31, Z
 89a:	e0 2d       	mov	r30, r0
 89c:	09 94       	ijmp

0000089e <__umulhisi3>:
 89e:	a2 9f       	mul	r26, r18
 8a0:	b0 01       	movw	r22, r0
 8a2:	b3 9f       	mul	r27, r19
 8a4:	c0 01       	movw	r24, r0
 8a6:	a3 9f       	mul	r26, r19
 8a8:	70 0d       	add	r23, r0
 8aa:	81 1d       	adc	r24, r1
 8ac:	11 24       	eor	r1, r1
 8ae:	91 1d       	adc	r25, r1
 8b0:	b2 9f       	mul	r27, r18
 8b2:	70 0d       	add	r23, r0
 8b4:	81 1d       	adc	r24, r1
 8b6:	11 24       	eor	r1, r1
 8b8:	91 1d       	adc	r25, r1
 8ba:	08 95       	ret

000008bc <__itoa_ncheck>:
 8bc:	bb 27       	eor	r27, r27
 8be:	4a 30       	cpi	r20, 0x0A	; 10
 8c0:	31 f4       	brne	.+12     	; 0x8ce <__itoa_ncheck+0x12>
 8c2:	99 23       	and	r25, r25
 8c4:	22 f4       	brpl	.+8      	; 0x8ce <__itoa_ncheck+0x12>
 8c6:	bd e2       	ldi	r27, 0x2D	; 45
 8c8:	90 95       	com	r25
 8ca:	81 95       	neg	r24
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__utoa_common>

000008d2 <__utoa_ncheck>:
 8d2:	bb 27       	eor	r27, r27

000008d4 <__utoa_common>:
 8d4:	fb 01       	movw	r30, r22
 8d6:	55 27       	eor	r21, r21
 8d8:	aa 27       	eor	r26, r26
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	aa 1f       	adc	r26, r26
 8e0:	a4 17       	cp	r26, r20
 8e2:	10 f0       	brcs	.+4      	; 0x8e8 <__utoa_common+0x14>
 8e4:	a4 1b       	sub	r26, r20
 8e6:	83 95       	inc	r24
 8e8:	50 51       	subi	r21, 0x10	; 16
 8ea:	b9 f7       	brne	.-18     	; 0x8da <__utoa_common+0x6>
 8ec:	a0 5d       	subi	r26, 0xD0	; 208
 8ee:	aa 33       	cpi	r26, 0x3A	; 58
 8f0:	08 f0       	brcs	.+2      	; 0x8f4 <__utoa_common+0x20>
 8f2:	a9 5d       	subi	r26, 0xD9	; 217
 8f4:	a1 93       	st	Z+, r26
 8f6:	00 97       	sbiw	r24, 0x00	; 0
 8f8:	79 f7       	brne	.-34     	; 0x8d8 <__utoa_common+0x4>
 8fa:	b1 11       	cpse	r27, r1
 8fc:	b1 93       	st	Z+, r27
 8fe:	11 92       	st	Z+, r1
 900:	cb 01       	movw	r24, r22
 902:	0c 94 83 04 	jmp	0x906	; 0x906 <strrev>

00000906 <strrev>:
 906:	dc 01       	movw	r26, r24
 908:	fc 01       	movw	r30, r24
 90a:	67 2f       	mov	r22, r23
 90c:	71 91       	ld	r23, Z+
 90e:	77 23       	and	r23, r23
 910:	e1 f7       	brne	.-8      	; 0x90a <strrev+0x4>
 912:	32 97       	sbiw	r30, 0x02	; 2
 914:	04 c0       	rjmp	.+8      	; 0x91e <strrev+0x18>
 916:	7c 91       	ld	r23, X
 918:	6d 93       	st	X+, r22
 91a:	70 83       	st	Z, r23
 91c:	62 91       	ld	r22, -Z
 91e:	ae 17       	cp	r26, r30
 920:	bf 07       	cpc	r27, r31
 922:	c8 f3       	brcs	.-14     	; 0x916 <strrev+0x10>
 924:	08 95       	ret

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
